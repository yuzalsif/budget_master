// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'domain/models/account.dart';
import 'domain/models/category.dart';
import 'domain/models/contact.dart';
import 'domain/models/transaction.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5644855842793032706),
    name: 'Account',
    lastPropertyId: const obx_int.IdUid(3, 5148818792863193564),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 555785802715381516),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6274887586715905097),
        name: 'name',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 5920278929942823271),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5148818792863193564),
        name: 'balance',
        type: 8,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 1678205279518213125),
    name: 'Category',
    lastPropertyId: const obx_int.IdUid(3, 2705909763619890460),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 854611161714196102),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5974678432310623026),
        name: 'name',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(2, 6588428112944447495),
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2705909763619890460),
        name: 'type',
        type: 6,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 8624051679214522126),
    name: 'Transaction',
    lastPropertyId: const obx_int.IdUid(8, 3119011134247525984),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2395643438032611326),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1964988402813614392),
        name: 'amount',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6525524262237110819),
        name: 'type',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 129270012141353743),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6530253785357067481),
        name: 'description',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2439584417631244812),
        name: 'accountId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 9189490182334141979),
        relationTarget: 'Account',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6929079245015721089),
        name: 'categoryId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 3571059290750212950),
        relationTarget: 'Category',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 3119011134247525984),
        name: 'contactId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 3757871041118194298),
        relationTarget: 'Contact',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 671643335111572529),
    name: 'Contact',
    lastPropertyId: const obx_int.IdUid(2, 6786185846759111794),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2905249455389504264),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6786185846759111794),
        name: 'name',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(5, 9179922224798327167),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 671643335111572529),
    lastIndexId: const obx_int.IdUid(6, 3757871041118194298),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Account: obx_int.EntityDefinition<Account>(
      model: _entities[0],
      toOneRelations: (Account object) => [],
      toManyRelations: (Account object) => {},
      getId: (Account object) => object.id,
      setId: (Account object, int id) {
        object.id = id;
      },
      objectToFB: (Account object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addFloat64(2, object.balance);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Account()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..balance = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            8,
            0,
          );

        return object;
      },
    ),
    Category: obx_int.EntityDefinition<Category>(
      model: _entities[1],
      toOneRelations: (Category object) => [],
      toManyRelations: (Category object) => {},
      getId: (Category object) => object.id,
      setId: (Category object, int id) {
        object.id = id;
      },
      objectToFB: (Category object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(4);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addInt64(2, object.type);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Category()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '')
          ..type = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);

        return object;
      },
    ),
    Transaction: obx_int.EntityDefinition<Transaction>(
      model: _entities[2],
      toOneRelations: (Transaction object) => [
        object.account,
        object.category,
        object.contact,
      ],
      toManyRelations: (Transaction object) => {},
      getId: (Transaction object) => object.id,
      setId: (Transaction object, int id) {
        object.id = id;
      },
      objectToFB: (Transaction object, fb.Builder fbb) {
        final descriptionOffset = object.description == null
            ? null
            : fbb.writeString(object.description!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.amount);
        fbb.addInt64(2, object.type);
        fbb.addInt64(3, object.date.millisecondsSinceEpoch);
        fbb.addOffset(4, descriptionOffset);
        fbb.addInt64(5, object.account.targetId);
        fbb.addInt64(6, object.category.targetId);
        fbb.addInt64(7, object.contact.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Transaction()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..amount = const fb.Float64Reader().vTableGet(
            buffer,
            rootOffset,
            6,
            0,
          )
          ..type = const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)
          ..date = DateTime.fromMillisecondsSinceEpoch(
            const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0),
          )
          ..description = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGetNullable(buffer, rootOffset, 12);
        object.account.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.account.attach(store);
        object.category.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.category.attach(store);
        object.contact.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.contact.attach(store);
        return object;
      },
    ),
    Contact: obx_int.EntityDefinition<Contact>(
      model: _entities[3],
      toOneRelations: (Contact object) => [],
      toManyRelations: (Contact object) => {},
      getId: (Contact object) => object.id,
      setId: (Contact object, int id) {
        object.id = id;
      },
      objectToFB: (Contact object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);

        final object = Contact()
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..name = const fb.StringReader(
            asciiOptimization: true,
          ).vTableGet(buffer, rootOffset, 6, '');

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Account] entity fields to define ObjectBox queries.
class Account_ {
  /// See [Account.id].
  static final id = obx.QueryIntegerProperty<Account>(
    _entities[0].properties[0],
  );

  /// See [Account.name].
  static final name = obx.QueryStringProperty<Account>(
    _entities[0].properties[1],
  );

  /// See [Account.balance].
  static final balance = obx.QueryDoubleProperty<Account>(
    _entities[0].properties[2],
  );
}

/// [Category] entity fields to define ObjectBox queries.
class Category_ {
  /// See [Category.id].
  static final id = obx.QueryIntegerProperty<Category>(
    _entities[1].properties[0],
  );

  /// See [Category.name].
  static final name = obx.QueryStringProperty<Category>(
    _entities[1].properties[1],
  );

  /// See [Category.type].
  static final type = obx.QueryIntegerProperty<Category>(
    _entities[1].properties[2],
  );
}

/// [Transaction] entity fields to define ObjectBox queries.
class Transaction_ {
  /// See [Transaction.id].
  static final id = obx.QueryIntegerProperty<Transaction>(
    _entities[2].properties[0],
  );

  /// See [Transaction.amount].
  static final amount = obx.QueryDoubleProperty<Transaction>(
    _entities[2].properties[1],
  );

  /// See [Transaction.type].
  static final type = obx.QueryIntegerProperty<Transaction>(
    _entities[2].properties[2],
  );

  /// See [Transaction.date].
  static final date = obx.QueryDateProperty<Transaction>(
    _entities[2].properties[3],
  );

  /// See [Transaction.description].
  static final description = obx.QueryStringProperty<Transaction>(
    _entities[2].properties[4],
  );

  /// See [Transaction.account].
  static final account = obx.QueryRelationToOne<Transaction, Account>(
    _entities[2].properties[5],
  );

  /// See [Transaction.category].
  static final category = obx.QueryRelationToOne<Transaction, Category>(
    _entities[2].properties[6],
  );

  /// See [Transaction.contact].
  static final contact = obx.QueryRelationToOne<Transaction, Contact>(
    _entities[2].properties[7],
  );
}

/// [Contact] entity fields to define ObjectBox queries.
class Contact_ {
  /// See [Contact.id].
  static final id = obx.QueryIntegerProperty<Contact>(
    _entities[3].properties[0],
  );

  /// See [Contact.name].
  static final name = obx.QueryStringProperty<Contact>(
    _entities[3].properties[1],
  );
}
